package org.cafiaso.server.network.connection;

import org.cafiaso.server.Server;
import org.cafiaso.server.network.connection.exceptions.UnknownPacketException;
import org.cafiaso.server.network.packet.client.ClientPacket;
import org.cafiaso.server.network.packet.server.ServerPacket;

import javax.crypto.SecretKey;
import java.io.IOException;
import java.net.InetAddress;
import java.util.UUID;

/**
 * Represents a connection between the server and a client.
 * <p>
 * The connection is initiated by the client as soon as it pings the server or is trying to connect
 * and is closed when the client disconnects from the server intentionally, when he is kicked
 * or when the ping has been completed.
 * <p>
 * Implementations are responsible for reading and writing packets to the client.
 */
public interface Connection extends AutoCloseable {

    /**
     * Reads <code>n</code> {@link ClientPacket}s from the client.
     * <p>
     * If no packet is available, this method returns immediately.
     *
     * @throws IOException            if an I/O error occurs while reading packets
     * @throws UnknownPacketException if an unknown packet is read for the current connection state
     */
    void readPackets() throws IOException;

    /**
     * Sends a packet to the client.
     *
     * @param packet the packet to send
     * @throws IOException if an I/O error occurs while sending the packet
     */
    void sendPacket(ServerPacket packet) throws IOException;

    /**
     * Gets the {@link Server} instance.
     *
     * @return the server instance
     */
    Server getServer();

    /**
     * Gets the address of the client.
     *
     * @return the address of the client
     */
    InetAddress getAddress();

    /**
     * Sets the state of the connection.
     *
     * @param state the new connection state
     */
    void setState(ConnectionState state);

    /**
     * Gets the identity of the client.
     * <p>
     * The identity is set during the login process and contains the client's username and UUID.
     *
     * @return the identity, or {@code null} if the identity has not been set yet
     */
    Identity getIdentity();

    /**
     * Sets the identity of the client.
     *
     * @param identity the identity
     */
    void setIdentity(Identity identity);

    /**
     * Gets the verify token. This is used to verify the client's identity.
     * <p>
     * The verify token is generated by the server and sent to the client during the
     * EncryptionResponse packet handling. The client must then send the verify token back to the server
     * to prove its identity.
     * <p>
     * The verify token is a random byte array generated by the server.
     *
     * @return the verify token, or {@code null} if the token has not been set yet
     */
    byte[] getVerifyToken();

    /**
     * Sets the verify token.
     *
     * @param verifyToken the verify token
     */
    void setVerifyToken(byte[] verifyToken);

    /**
     * Sets the shared secret.
     * <p>
     * The shared secret is used to encrypt and decrypt packets sent between the client and the server.
     *
     * @param sharedSecret the shared secret
     */
    void setSharedSecret(SecretKey sharedSecret);

    /**
     * Checks if the connection is open.
     *
     * @return {@code true} if the connection is open, {@code false} otherwise
     */
    boolean isOpen();

    @Override
    void close() throws IOException;

    /**
     * Represents a player's identity.
     *
     * @param username the player's username
     * @param uuid     the player's UUID
     */
    record Identity(String username, UUID uuid) {

    }
}
